Author: Henrique Augusto Rodrigues
Orientador(a): Rosilane Ribeiro da Mota

**Cohen-Sutherland.cc**

# Artigo: Clipping de Linhas em Paralelo com MPI e SFML

Neste artigo, vamos explorar um código em C++ que utiliza a biblioteca MPI (Message Passing Interface) para realizar o recorte (clipping) de segmentos de linha em um ambiente de programação paralela. O código também utiliza a biblioteca SFML (Simple and Fast Multimedia Library) para criar uma representação visual dos segmentos de linha recortados. Vamos analisar cada parte do código e entender como ele funciona.

## Introdução

O código em questão implementa o algoritmo de Cohen-Sutherland para recorte de segmentos de linha em um plano bidimensional. O algoritmo de Cohen-Sutherland é amplamente utilizado em computação gráfica para descartar partes de segmentos de linha que estão fora de uma janela de visualização específica. O objetivo é otimizar o desempenho da renderização gráfica, evitando o desenho de segmentos de linha que não são visíveis na janela de saída.

## Bibliotecas Utilizadas

O código começa importando as seguintes bibliotecas:

```cpp
#include <iostream>
#include <SFML/Graphics.hpp>
#include <mpi.h>
```

- `<iostream>`: Esta biblioteca é usada para entrada e saída padrão, permitindo a exibição de mensagens no console.
- `<SFML/Graphics.hpp>`: A biblioteca SFML é utilizada para a criação de uma janela gráfica e desenho de segmentos de linha na tela.
- `<mpi.h>`: A biblioteca MPI é utilizada para realizar a comunicação entre processos paralelos.

## Definições de Constantes

O código define várias constantes que são usadas durante o processo de recorte de segmentos de linha:

```cpp
#define INSIDE 0
#define LEFT 1
#define RIGHT 2
#define BOTTOM 4
#define TOP 8
```

Essas constantes representam os códigos de região de Cohen-Sutherland, que são usados para identificar em qual região do plano o ponto se encontra em relação à janela de recorte.

```cpp
#define X_MIN 0
#define X_MAX 800
#define Y_MIN 0
#define Y_MAX 600
```

Estas constantes definem as coordenadas da janela de recorte, ou seja, os limites da área em que os segmentos de linha serão recortados.

## Função `calculateRegionCode`

```cpp
int calculateRegionCode(int x, int y)
```

Esta função recebe as coordenadas de um ponto e calcula seu código de região de acordo com a janela de recorte definida. O código de região é uma combinação de valores INSIDE, LEFT, RIGHT, BOTTOM e TOP, indicando a posição relativa do ponto em relação à janela de recorte.

## Função `cohenSutherland`

```cpp
void cohenSutherland(int &x1, int &y1, int &x2, int &y2)
```

A função `cohenSutherland` implementa o algoritmo de recorte de Cohen-Sutherland para um segmento de linha definido pelos pontos `(x1, y1)` e `(x2, y2)`. O algoritmo decide se o segmento de linha está totalmente dentro, totalmente fora ou parcialmente dentro da janela de recorte e faz os ajustes necessários.

## Função `main`

A função `main` é o ponto de entrada do programa MPI e é onde a execução começa. Aqui estão os principais pontos do código dentro da função `main`:

1. Inicialização do MPI:

   ```cpp
   MPI_Init(&argc, &argv);
   ```

   O código inicia o ambiente MPI para permitir a comunicação entre processos paralelos.

2. Determinação do Rank:

   ```cpp
   int rank;
   MPI_Comm_rank(MPI_COMM_WORLD, &rank);
   ```

   O código determina o rank (identificador) do processo atual no contexto MPI.

3. Entrada de Dados (Processo 0):

   Se o processo tem rank 0, ele solicita que o usuário insira as coordenadas dos pontos inicial e final do segmento de linha a ser recortado.

4. Comunicação MPI:

   O código usa `MPI_Bcast` para transmitir as coordenadas do segmento de linha para todos os processos paralelos.

5. Recorte e Renderização (Outros Processos):

   Para os processos com rank diferente de 0, o código realiza o recorte do segmento de linha usando a função `cohenSutherland` e, em seguida, cria uma janela gráfica com a SFML para visualizar o segmento de linha recortado.

6. Loop do Evento da Janela:

   O código entra em um loop de evento da janela SFML para manter a janela aberta até que o usuário a feche.

7. Finalização do MPI:

   O código encerra o ambiente MPI antes de encerrar o programa.

## Conclusão

Este artigo explorou um código em C++ que utiliza MPI para realizar o recorte de segmentos de linha em paralelo e SFML para visualizar os resultados. O algoritmo de Cohen-Sutherland é uma técnica importante em computação gráfica para otimizar a renderização de gráficos, eliminando partes de segmentos de linha que não são visíveis em uma janela de visualização específica. A combinação de MPI e SFML oferece uma abordagem interessante para processar e visualizar operações de recorte em paralelo.

**Cohen-Sutherland.py**

# Artigo: Clipping de Linhas Interativo com Tkinter em Python

Neste artigo, exploraremos um código Python que utiliza a biblioteca Tkinter para criar uma interface gráfica interativa que demonstra o algoritmo de recorte de segmentos de linha Cohen-Sutherland. O código permite que os usuários insiram coordenadas de pontos iniciais e finais de segmentos de linha, realiza o recorte e exibe visualmente o resultado em uma janela gráfica. Vamos analisar cada parte do código e entender como ele funciona.

## Introdução

O código em questão utiliza a biblioteca Tkinter, que é uma biblioteca de GUI (Interface Gráfica do Usuário) padrão para Python, para criar uma interface interativa para o algoritmo de Cohen-Sutherland. Este algoritmo é comumente utilizado em computação gráfica para eliminar partes de segmentos de linha que estão fora de uma janela de visualização específica, otimizando assim o desempenho da renderização gráfica.

## Bibliotecas Utilizadas

O código começa importando as seguintes bibliotecas:

```python
import tkinter as tk
from tkinter import Canvas, Entry, Button, Label
```

- `tkinter`: Esta é a biblioteca principal para criação de interfaces gráficas em Python.
- `Canvas`, `Entry`, `Button`, `Label`: São classes específicas do Tkinter utilizadas para criar widgets como campos de entrada, botões, rótulos e áreas de desenho.

## Definições de Constantes

O código define constantes que representam os códigos de região de Cohen-Sutherland e as coordenadas da janela de recorte:

```python
INSIDE = 0
LEFT = 1
RIGHT = 2
BOTTOM = 4
TOP = 8

X_MIN = 0
X_MAX = 800
Y_MIN = 0
Y_MAX = 600
```

Essas constantes são utilizadas para calcular os códigos de região de Cohen-Sutherland e determinar a posição relativa dos pontos em relação à janela de recorte.

## Função `calculate_region_code`

```python
def calculate_region_code(x, y):
```

Esta função recebe as coordenadas de um ponto e calcula seu código de região de acordo com a janela de recorte definida. O código de região é uma combinação de valores `INSIDE`, `LEFT`, `RIGHT`, `BOTTOM` e `TOP`, que indicam a posição relativa do ponto em relação à janela de recorte.

## Função `cohen_sutherland`

```python
def cohen_sutherland(x1, y1, x2, y2):
```

A função `cohen_sutherland` implementa o algoritmo de recorte de Cohen-Sutherland para um segmento de linha definido pelos pontos `(x1, y1)` e `(x2, y2)`. O algoritmo decide se o segmento de linha está totalmente dentro, totalmente fora ou parcialmente dentro da janela de recorte e faz os ajustes necessários.

## Configuração da Interface Gráfica

O código cria uma janela Tkinter e widgets para entrada de dados, incluindo campos de entrada (`Entry`) para as coordenadas `x1`, `y1`, `x2` e `y2`, bem como um botão que aciona a função de recorte.

Uma área de desenho (`Canvas`) é usada para exibir visualmente o segmento de linha recortado, e um rótulo (`Label`) é usado para exibir o resultado do recorte.

## Loop de Eventos

```python
root.mainloop()
```

O código entra em um loop de eventos da Tkinter, que mantém a interface gráfica em execução e responde a interações do usuário, como inserção de coordenadas e cliques no botão de recorte.

## Conclusão

Este artigo explorou um código Python que utiliza a biblioteca Tkinter para criar uma interface interativa para o algoritmo de recorte de segmentos de linha Cohen-Sutherland. O código permite que os usuários insiram coordenadas de pontos iniciais e finais de segmentos de linha, realiza o recorte e exibe visualmente o resultado em uma janela gráfica. A combinação de Tkinter e o algoritmo de Cohen-Sutherland oferece uma forma interativa de entender e visualizar o processo de recorte de segmentos de linha em uma janela de visualização específica.

**Liang-Barsky.c**

# Artigo: Recorte de Linhas com Algoritmo de Liang-Barsky em C

Neste artigo, vamos explorar um código em C que implementa o algoritmo de recorte de segmentos de linha de Liang-Barsky. Este algoritmo é amplamente utilizado em computação gráfica para eliminar partes de segmentos de linha que estão fora de uma janela de visualização específica. Vamos analisar cada parte do código e entender como ele funciona.

## Introdução

O código em questão implementa o algoritmo de Liang-Barsky para recorte de segmentos de linha em um plano bidimensional. O objetivo é otimizar o desempenho da renderização gráfica, eliminando partes de segmentos de linha que não são visíveis na janela de saída. O algoritmo de Liang-Barsky é conhecido por ser eficiente e preciso na determinação das partes visíveis de um segmento de linha.

## Função `clip`

```c
float clip(float p, float q, float *t1, float *t2)
```

Esta função calcula a interseção entre dois números `p` e `q` e atualiza os valores de `t1` e `t2` de acordo com as regras do algoritmo de Liang-Barsky. Os parâmetros `t1` e `t2` são usados para manter o intervalo de valores que definem a parte visível do segmento de linha.

## Função `liangBarsky`

```c
void liangBarsky(float x1, float y1, float x2, float y2, float xmin, float ymin, float xmax, float ymax)
```

A função `liangBarsky` implementa o algoritmo de Liang-Barsky para recortar um segmento de linha definido pelos pontos `(x1, y1)` e `(x2, y2)` em relação à janela de recorte definida pelos pontos `(xmin, ymin)` e `(xmax, ymax)`.

- Os valores iniciais de `t1` e `t2` são definidos como 0 e 1, respectivamente.
- A função calcula as diferenças entre os pontos iniciais e finais do segmento de linha (`dx` e `dy`).
- Em seguida, chama a função `clip` quatro vezes, uma vez para cada lado da janela de recorte (esquerda, direita, inferior e superior).
- Se o segmento de linha cruza a janela de recorte, ele é desenhado e exibido na saída padrão.
- Se o segmento de linha está completamente fora da janela de recorte, uma mensagem informando isso é exibida.

## Função `main`

A função `main` é o ponto de entrada do programa. Aqui estão os principais pontos do código dentro da função `main`:

- São definidos os pontos iniciais e finais do segmento de linha (`x1`, `y1`, `x2`, `y2`) e os limites da janela de recorte (`xmin`, `ymin`, `xmax`, `ymax`).
- São exibidas na saída padrão as coordenadas do segmento de linha e da janela de recorte.
- A função `liangBarsky` é chamada para realizar o recorte do segmento de linha em relação à janela de recorte.

## Conclusão

Este artigo explorou um código em C que implementa o algoritmo de recorte de segmentos de linha de Liang-Barsky. O algoritmo é utilizado em computação gráfica para determinar as partes visíveis de um segmento de linha em relação a uma janela de recorte. O código fornece uma implementação eficiente e precisa do algoritmo, permitindo a visualização das partes recortadas do segmento de linha em um ambiente de linha de comando. O uso do algoritmo de Liang-Barsky é valioso em cenários nos quais é necessário otimizar o desempenho da renderização gráfica, eliminando partes que não estão dentro da área de visualização desejada.

**Sutherland-Hodgman.c**

# Artigo: Recorte de Linhas com Algoritmo de Liang-Barsky em C (Parte 2)

Neste artigo, vamos continuar a explorar um código em C que implementa o algoritmo de recorte de segmentos de linha de Liang-Barsky. O código utiliza uma abordagem baseada em estruturas de dados para representar os pontos iniciais e finais do segmento de linha. Vamos analisar cada parte do código e entender como ele funciona.

## Introdução

O código em questão continua a implementação do algoritmo de recorte de Liang-Barsky. Desta vez, ele utiliza uma estrutura de dados `Point` para representar os pontos iniciais e finais do segmento de linha, tornando o código mais organizado e legível.

## Definição da Estrutura `Point`

```c
typedef struct {
    float x, y;
} Point;
```

A estrutura `Point` é definida para armazenar as coordenadas `x` e `y` de um ponto. Ela é utilizada para representar os pontos iniciais e finais do segmento de linha.

## Função `liangBarsky`

```c
int liangBarsky(Point p1, Point p2, float *t1, float *t2, float xmin, float xmax, float ymin, float ymax) {
```

A função `liangBarsky` continua a implementação do algoritmo de Liang-Barsky para recortar um segmento de linha representado pelas estruturas de dados `Point`. Ela recebe os pontos `p1` e `p2`, bem como os limites da janela de recorte (`xmin`, `xmax`, `ymin`, `ymax`).

- Os valores de `dx` e `dy` são calculados como a diferença entre as coordenadas `x` e `y` dos pontos finais e iniciais, respectivamente.
- Os vetores `p` e `q` são criados para representar os valores usados no cálculo do parâmetro de interseção `t`.
- Os valores `tEnter` e `tExit` são inicializados com 0 e 1, respectivamente, para manter o intervalo de valores válidos de `t`.
- Um loop `for` é usado para calcular `t` e atualizar `tEnter` e `tExit` para cada um dos quatro lados da janela de recorte (esquerda, direita, inferior e superior).
- Se `tEnter` for menor que `tExit`, significa que o segmento de linha cruza a janela de recorte, e os valores de `t1` e `t2` são atualizados com `tEnter` e `tExit`.
- A função retorna 1 se o segmento de linha está dentro da janela de recorte, caso contrário, retorna 0.

## Função `main`

A função `main` continua a ser o ponto de entrada do programa. Aqui estão os principais pontos do código dentro da função `main`:

- Os pontos iniciais e finais do segmento de linha são definidos como estruturas `Point`.
- Os limites da janela de recorte são definidos (`xmin`, `xmax`, `ymin`, `ymax`).
- A função `liangBarsky` é chamada para realizar o recorte do segmento de linha.
- Se o segmento de linha está dentro da janela de recorte, as coordenadas dos pontos recortados são exibidas na saída padrão.
- Caso contrário, uma mensagem informando que o segmento de linha está fora da janela de recorte é exibida.

## Conclusão

Este artigo continuou a explorar um código em C que implementa o algoritmo de recorte de segmentos de linha de Liang-Barsky. A diferença é que desta vez o código utiliza uma estrutura de dados `Point` para representar os pontos iniciais e finais do segmento de linha, tornando o código mais organizado e legível. O algoritmo de Liang-Barsky é valioso em computação gráfica para determinar as partes visíveis de um segmento de linha em relação a uma janela de recorte, e sua implementação em C oferece uma solução eficiente e precisa para essa tarefa.

# Documentação de Construção de Executável para Windows do Programa 2cohen_Sutherland.py usando o PyInstaller

## Introdução

Este documento descreve o processo de construção de um executável para Windows a partir do programa Python 2cohen_Sutherland.py utilizando a ferramenta PyInstaller. O programa em questão implementa o algoritmo de recorte de segmentos de linha Cohen-Sutherland. A criação de um executável facilita a execução do programa em sistemas Windows, pois elimina a necessidade de ter o Python instalado no sistema do usuário final.

## Pré-requisitos

Antes de prosseguir com a criação do executável, é necessário atender aos seguintes pré-requisitos:

1. **Python**: Verifique se você tem o Python instalado no seu sistema. Você pode fazer o download da versão mais recente em [python.org](https://www.python.org/downloads/).

2. **PyInstaller**: Certifique-se de que o PyInstaller esteja instalado. Se não estiver, você pode instalá-lo usando o pip:

   ```
   pip install pyinstaller
   ```

## Processo de Construção do Executável

Aqui estão os passos para criar o executável a partir do programa 2cohen_Sutherland.py usando o PyInstaller:

1. **Navegue até a pasta do seu projeto**: Abra o prompt de comando ou o terminal e navegue até a pasta que contém o arquivo 2cohen_Sutherland.py.

2. **Execute o PyInstaller**: Use o seguinte comando para criar o executável:

   ```
   pyinstaller --onefile 2cohen_Sutherland.py
   ```

   - `--onefile`: Essa opção instrui o PyInstaller a criar um único arquivo executável em vez de vários arquivos.

3. **Aguarde o processo de construção**: O PyInstaller começará a empacotar seu código e suas dependências em um único arquivo. Isso pode levar algum tempo, dependendo do tamanho do seu projeto.

4. **Localize o executável**: Após a conclusão do processo, o PyInstaller criará uma pasta chamada "dist" na mesma pasta do seu projeto. Dentro dessa pasta, você encontrará o arquivo executável com o nome "2cohen_Sutherland.exe".

## Executando o Programa

Para executar o programa a partir do executável gerado, siga estas etapas:

1. **Localize o executável**: Vá para a pasta "dist" onde o executável foi criado. Você deve encontrar o arquivo "2cohen_Sutherland.exe".

2. **Execute o executável**: Dê um clique duplo no arquivo "2cohen_Sutherland.exe" para executar o programa.

3. **Uso do programa**: O programa abrirá uma interface que permite ao usuário inserir as coordenadas dos pontos iniciais e finais de um segmento de linha e, em seguida, realizar o recorte de acordo com a janela de recorte padrão definida no código. O resultado do recorte será exibido na interface gráfica ou na saída do console.

4. **Interaja com o programa**: Siga as instruções fornecidas pela interface gráfica ou pela saída do console para interagir com o programa e visualizar o resultado do recorte.

Lembre-se de que o executável é uma versão independente do Python e não requer a instalação prévia do Python no sistema do usuário final. Isso torna mais fácil compartilhar e distribuir o programa em sistemas Windows.
